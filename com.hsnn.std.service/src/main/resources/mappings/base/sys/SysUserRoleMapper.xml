<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hsnn.medstgmini.base.sys.dao.SysUserRoleDao">
	<resultMap type="com.hsnn.medstgmini.base.sys.model.SysUserRole" id="BaseResultMap">
        <result property="id" column="id" javaType="Integer"/>
        <result property="userId" column="user_id" javaType="String"/>
        <result property="roleId" column="role_id" javaType="Integer"/>
        <result property="addUserId" column="add_user_id" javaType="String"/>
        <result property="addUserName" column="add_user_name" javaType="String"/>
        <result property="addTime" column="add_time" javaType="Date"/>
        <result property="lastUpdateUserId" column="last_update_user_id" javaType="String"/>
        <result property="lastUpdateUserName" column="last_update_user_name" javaType="String"/>
        <result property="lastUpdateTime" column="last_update_time" javaType="Date"/>
	</resultMap>
	
	<sql id="full-columns" >
        t.id,
        t.user_id,
        t.role_id,
        t.add_user_id,
        t.add_user_name,
        t.add_time,
        t.last_update_user_id,
        t.last_update_user_name,
        t.last_update_time
	</sql>

	
	<select id="load" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT * from sys_user_role where id =  #{value}
	</select>
	
	<select id="get" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT * from sys_user_role where id =  #{value}
	</select>
	
	<select id="findAll" resultMap="BaseResultMap">
		SELECT * from sys_user_role 
	</select>
	

	<insert id="persist" parameterType="com.hsnn.medstgmini.base.sys.model.SysUserRole">
		INSERT INTO sys_user_role(
	            user_id ,
	            role_id ,
	            add_user_id ,
	            add_user_name ,
	            add_time ,
	            last_update_user_id ,
	            last_update_user_name ,
	            last_update_time 
	    ) 
		VALUES (
	        	#{userId},
	        	#{roleId},
	        	#{addUserId},
	        	#{addUserName},
	        	#{addTime},
	        	#{lastUpdateUserId},
	        	#{lastUpdateUserName},
	        	#{lastUpdateTime}
		)
	</insert>
	
	
	<insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="com.hsnn.medstgmini.base.sys.model.SysUserRole">
		<!--<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">-->
			<!--SELECT SYSUSERROLE.nextval from dual-->
        <!--</selectKey>-->
		INSERT INTO sys_user_role(
				id,
	            user_id ,
	            role_id ,
	            add_user_id ,
	            add_user_name ,
	            add_time ,
	            last_update_user_id ,
	            last_update_user_name ,
	            last_update_time 
		) 
		VALUES (
				#{id},
	        	#{userId},
	        	#{roleId},
	        	#{addUserId},
	        	#{addUserName},
	        	#{addTime},
	        	#{lastUpdateUserId},
	        	#{lastUpdateUserName},
	        	#{lastUpdateTime}
		)
	</insert>

	<update id="update" parameterType="com.hsnn.medstgmini.base.sys.model.SysUserRole">
		UPDATE sys_user_role  
		<set>
	        	user_id = #{userId},
	        	role_id = #{roleId},
	        	add_user_id = #{addUserId},
	        	add_user_name = #{addUserName},
	        	add_time = #{addTime},
	        	last_update_user_id = #{lastUpdateUserId},
	        	last_update_user_name = #{lastUpdateUserName},
	        	last_update_time = #{lastUpdateTime},
        </set>
		WHERE  id =  #{id}
	</update>

	<delete id="delete" parameterType="java.lang.Integer">
		DELETE FROM sys_user_role WHERE  id =  #{value}
	</delete>

	<select id="queryAll" parameterType="map" resultMap="BaseResultMap">
		SELECT <include refid="full-columns" />
	    FROM sys_user_role t
		<where>
			<if test="@OGNL@isNotEmpty(id)">
	            AND t.id = #{id}
	        </if>
			<if test="@OGNL@isNotEmpty(userId)">
	            AND t.user_id = #{userId}
	        </if>
			<if test="@OGNL@isNotEmpty(roleId)">
	            AND t.role_id = #{roleId}
	        </if>
			<if test="@OGNL@isNotEmpty(addUserId)">
	            AND t.add_user_id = #{addUserId}
	        </if>
			<if test="@OGNL@isNotEmpty(addUserName)">
	            AND t.add_user_name = #{addUserName}
	        </if>
			<if test="@OGNL@isNotEmpty(addTime)">
	            AND t.add_time = #{addTime}
	        </if>
			<if test="@OGNL@isNotEmpty(lastUpdateUserId)">
	            AND t.last_update_user_id = #{lastUpdateUserId}
	        </if>
			<if test="@OGNL@isNotEmpty(lastUpdateUserName)">
	            AND t.last_update_user_name = #{lastUpdateUserName}
	        </if>
			<if test="@OGNL@isNotEmpty(lastUpdateTime)">
	            AND t.last_update_time = #{lastUpdateTime}
	        </if>
		</where>
		<if test="@OGNL@isNotEmpty(orderColumn) ">
        ORDER BY t.${orderColumn} <if test="@OGNL@isNotEmpty(orderDirection) ">${orderDirection}</if>
        </if>
	</select>
	
	<insert id="insertBatch" parameterType="java.util.List" >
        INSERT INTO sys_user_role (
        	id,
            user_id ,
            role_id ,
            add_user_id ,
            add_user_name ,
            add_time ,
            last_update_user_id ,
            last_update_user_name ,
            last_update_time 
        ) select SYSUSERROLE.nextval,p.* from(
        <foreach collection="list" item="item" index="index" separator="union all">
        select 
        	#{item.userId},
        	#{item.roleId},
        	#{item.addUserId},
        	#{item.addUserName},
        	#{item.addTime},
        	#{item.lastUpdateUserId},
        	#{item.lastUpdateUserName},
        	#{item.lastUpdateTime}
        from dual
        </foreach> ) p
	</insert>
</mapper>
